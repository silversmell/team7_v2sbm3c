<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- SB가 자동으로 구현하여 연동하는 interface -->
<mapper namespace="dev.mvc.account.AccountDAOInter"> <!-- SB가 자동으로 구현하여 연동하는
	interface -->

	<!-- 해시태그 목록 가져오기 -->
	<select id="hashtagList" resultType="dev.mvc.recommend.HashtagVO">
		SELECT tag_no, tag_code, tag_name
		FROM hashtag
	</select>

	<!-- 해시태그 분류 코드 가져오기 -->
	<select id="tagCodeList" resultType="String">
		SELECT LISTAGG(tag_code, ',') WITHIN GROUP (ORDER BY tag_code DESC) AS
		tag_codes
		FROM (
		SELECT DISTINCT tag_code
		FROM hashtag
		)
	</select>

	<!-- 아이디(이메일) 중복 검사 -->
	<select id="checkID" resultType="int" parameterType="String">
		SELECT COUNT(acc_id) AS cnt
		FROM account
		WHERE acc_id=#{acc_id}
	</select>

	<!-- 이름(닉네임) 중복 검사 -->
	<select id="checkName" resultType="int" parameterType="String">
		SELECT COUNT(acc_name) AS cnt
		FROM account
		WHERE acc_name=#{acc_name}
	</select>

	<!-- 회원 가입 -->
	<insert id="create" parameterType="dev.mvc.account.AccountVO">
		<selectKey keyProperty="acc_no" resultType="int" order="AFTER">
			SELECT ACCOUNT_SEQ.currval AS acc_no FROM dual
		</selectKey> INSERT
		INTO ACCOUNT(acc_no, acc_id, acc_pw, acc_name, acc_date, acc_grade)
		VALUES(ACCOUNT_SEQ.nextval, #{acc_id}, #{acc_pw}, #{acc_name}, sysdate,
		15) </insert>

	<!-- 추천 데이터(해시태그) 저장 -->
	<insert id="insertRecommend" parameterType="dev.mvc.recommend.RecommendVO">
		INSERT INTO RECOMMEND(recom_no, acc_no, tag_no)
		VALUES(RECOMMEND_SEQ.nextval, #{acc_no}, #{tag_no})
	</insert>

	<!-- 회원 목록(관리자) -->
	<select id="list" resultType="dev.mvc.account.AccountVO">
		SELECT acc_no, acc_id, acc_pw, acc_name, acc_tel, acc_age, acc_date,
		acc_grade,
		acc_img, acc_saved_img, acc_thumb_img, acc_img_size
		FROM account
		ORDER BY acc_grade ASC, acc_id ASC
	</select>

	<!-- 회원 정보 조회(회원 목록, 마이페이지) -->
	<select id="read" resultType="dev.mvc.account.AccountVO" parameterType="int">
		SELECT acc_no, acc_id, acc_pw, acc_name, acc_tel, acc_age, acc_date,
		acc_grade,
		acc_img, acc_saved_img, acc_thumb_img, acc_img_size
		FROM account
		WHERE acc_no = #{acc_no}
	</select>

	<!-- 아이디로 회원 정보 조회(로그인, 비밀번호 찾기) -->
	<select id="readById" resultType="dev.mvc.account.AccountVO"
		parameterType="String">
		SELECT acc_no, acc_id, acc_pw, acc_name, acc_tel, acc_age, acc_date,
		acc_grade,
		acc_img, acc_saved_img, acc_thumb_img, acc_img_size
		FROM account
		WHERE acc_id = #{acc_id}
	</select>

	<!-- 로그인 -->
	<select id="login" resultType="int" parameterType="HashMap">
		SELECT COUNT(acc_no) as cnt
		FROM account
		WHERE acc_id=#{acc_id} AND acc_pw=#{acc_pw}
	</select>

	<!-- 회원 로그 기록 -->
	<insert id="recordLog" parameterType="dev.mvc.account.AccLogVO">
		INSERT INTO ACC_LOG(acc_log_no, acc_no, acc_log_ip, acc_log_date)
		VALUES(ACC_LOG_SEQ.nextval, #{acc_no}, #{acc_log_ip}, sysdate)
	</insert>


	<!-- 선택된 해시태그 조회(회원 정보 조회) -->
	<select id="selectedTags" resultType="String" parameterType="int">
		SELECT LISTAGG(h.tag_name, ',') WITHIN GROUP (ORDER BY tag_code DESC) AS
		tag_name
		FROM recommend r
		INNER JOIN hashtag h ON h.tag_no = r.tag_no
		WHERE r.acc_no = #{acc_no}
	</select>

	<!-- 회원 정보 수정(회원 목록, 마이페이지) -->
	<update id="update" parameterType="dev.mvc.account.AccountVO">
		UPDATE account
		SET acc_name=#{acc_name}, acc_tel=#{acc_tel}, acc_age=#{acc_age}
		WHERE acc_no=#{acc_no}
	</update>

	<!-- 프로필 사진 업데이트 -->
	<update id="updatePic" parameterType="dev.mvc.account.AccountVO">
		UPDATE account
		SET acc_img=#{acc_img}, acc_saved_img=#{acc_saved_img},
		acc_thumb_img=#{acc_thumb_img}, acc_img_size=#{acc_img_size}
		WHERE acc_no=#{acc_no}
	</update>

	<!-- 기존 추천 데이터(해시태그) 삭제 -->
	<delete id="deleteRecommend" parameterType="int">
		DELETE FROM recommend WHERE acc_no = #{acc_no}
	</delete>

	<!-- 현재 비밀번호 확인 -->
	<select id="checkPasswd" parameterType="HashMap" resultType="int">
		SELECT COUNT(acc_no) as cnt
		FROM account
		WHERE acc_no=#{acc_no} AND acc_pw=#{acc_pw}
	</select>

	<!-- 비밀번호 변경 -->
	<update id="updatePasswd" parameterType="HashMap">
		UPDATE account
		SET acc_pw=#{acc_pw}
		WHERE acc_no=#{acc_no}
	</update>

	<!-- 비밀번호 재설정(비밀번호 찾기) -->
	<update id="resetPasswd" parameterType="HashMap">
		UPDATE account
		SET acc_pw=#{acc_pw}
		WHERE acc_id=#{acc_id}
	</update>

	<!-- 회원 정보 삭제(관리자, 회원 목록) -->
	<delete id="delete" parameterType="int">
		DELETE FROM account
		WHERE acc_no=#{acc_no}
	</delete>

	<!-- 회원 탈퇴(사용자, 마이페이지) -->


</mapper>















