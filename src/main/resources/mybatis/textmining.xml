<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dev.mvc.textmining.Tm_contentsDAOInter"> <!-- SB가 자동으로 구현하여 연동하는 interface -->

  <!-- 전체 목록 -->
  <select id="tm_list_all" resultType="dev.mvc.textmining.Tm_contentsVO">
    SELECT tcon_no, cate_no, acc_no, tcon_name, tcon_contents, tcon_views, tcon_bookmark, tcon_bookcnt, tcon_comment, tcon_date
    FROM tm_contents
    ORDER BY tcon_no ASC
  </select>
  
  <!-- 등록 -->
  <insert id="tm_create">
    <!-- 등록후 Qna_contentsVO class의 qcon_no 컬럼에 PK return  -->
    <selectKey keyProperty="tcon_no" resultType="int" order="BEFORE">
      SELECT tm_contents_seq.nextval FROM dual
    </selectKey>
    
    INSERT INTO TM_CONTENTS(tcon_no, cate_no, acc_no, tcon_name, tcon_contents, tcon_views, tcon_bookmark, tcon_bookcnt, tcon_date)
    VALUES(#{tcon_no}, #{cate_no}, #{acc_no}, #{tcon_name}, #{tcon_contents}, 0, 'N', 0, sysdate)
  </insert>
  
  <!-- 첨부 파일 등록 -->
  <insert id="tm_attach_create" parameterType="dev.mvc.textmining.Tm_imageVO">
    INSERT INTO TM_IMAGE(file_no, tcon_no, file_origin_name, file_upload_name, file_thumb_name, file_size, file_date)
    VALUES(tm_image_seq.nextval, #{tcon_no}, #{file_origin_name}, #{file_upload_name}, #{file_thumb_name}, #{file_size}, sysdate)
  </insert>
  
  <!-- 특정 글에 따른 목록 -->
  <select id="list_by_tcon_no" resultType="dev.mvc.textmining.Tm_contentsVO">
    SELECT tcon_no, cate_no, acc_no, tcon_name, tcon_contents, tcon_views, tcon_bookmark, tcon_bookcnt, tcon_comment, tcon_date
    FROM tm_contents
    WHERE tcon_no=#{tcon_no}
  </select>
  
  <!-- 전체 파일 목록 -->
  <select id="tm_list_all_image" resultType="dev.mvc.textmining.Tm_imageVO">
    SELECT file_no, tcon_no, file_origin_name, file_upload_name, file_thumb_name, file_size, file_date
    FROM tm_image
    ORDER BY tcon_no DESC, file_no ASC
  </select>
  
  <!-- 일반적인 조회 -->
  <select id="tm_read" resultType="dev.mvc.textmining.Tm_contentsVO" parameterType="int">
    SELECT tcon_no, cate_no, acc_no, tcon_name, tcon_contents, tcon_views, tcon_bookmark, tcon_bookcnt, tcon_comment, tcon_date
    FROM tm_contents
    WHERE tcon_no= #{tcon_no}
  </select> 
  
  <!-- 이미지 조회 -->
  <select id="tm_read_image" resultType="dev.mvc.textmining.Tm_contentsVO" parameterType="Integer">
    SELECT file_no, tcon_no, file_origin_name, file_upload_name, file_thumb_name, file_size, file_date
    FROM tm_image
    WHERE tcon_no=#{tcon_no}
  </select>

  <!-- 카테고리별 검색 목록 -->
  <select id="list_by_qna_search" resultType="dev.mvc.textmining.Tm_contentsVO" parameterType="HashMap">
    SELECT tcon_no, cate_no, acc_no, tcon_name, tcon_contents, tcon_views, tcon_bookmark, tcon_bookcnt, tcon_comment, tcon_date, word
    FROM tm_contents
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
        WHERE cate_no=#{cate_no}
      </when>
      <otherwise> <!-- 검색하는 경우 -->
        WHERE cate_no=#{cate_no} AND (UPPER(tcon_name) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(tcon_contents) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
      </otherwise>
    </choose>
    ORDER BY tcon_no DESC
  </select>

  <!-- 카테고리별 검색 레코드 갯수 -->
  <select id="list_by_tm_search_count" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt
    FROM tm_contents
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우의 레코드 갯수 -->
        WHERE cate_no=#{cate_no}
      </when>
      <otherwise> <!-- 검색하는 경우의 레코드 갯수 -->
        WHERE cate_no=#{cate_no} AND (UPPER(tcon_name) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(tcon_contents) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
      </otherwise>
    </choose>
  </select>   

  <!-- 카테고리별 검색 + 페이징 목록 -->
  <select id="list_by_tm_search_paging" resultType="dev.mvc.textmining.Tm_contentsVO" parameterType="HashMap">
    SELECT tcon_no, cate_no, acc_no, tcon_name, tcon_contents, tcon_views, tcon_bookmark, tcon_bookcnt, tcon_comment, tcon_date, r
    FROM (
              SELECT tcon_no, cate_no, acc_no, tcon_name, tcon_contents, tcon_views, tcon_bookmark, tcon_bookcnt, tcon_comment, tcon_date, rownum as r
              FROM (
                        SELECT tcon_no, cate_no, acc_no, tcon_name, tcon_contents, tcon_views, tcon_bookmark, tcon_bookcnt, tcon_comment, tcon_date
                        FROM tm_contents
                        <choose>
                          <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
                            WHERE cate_no=#{cate_no}
                          </when>
                          <otherwise>
                            WHERE cate_no=#{cate_no} AND (UPPER(tcon_name) LIKE '%' || UPPER(#{word}) || '%' 
                                                                      OR UPPER(tcon_contents) LIKE '%' || UPPER(#{word}) || '%' 
                                                                      OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
                          </otherwise>
                        </choose>
                        ORDER BY tcon_no DESC
               )
    )
    WHERE <![CDATA[ r >= #{start_num} AND r <= #{end_num} ]]>
  </select>
  
  <!-- 조회수 증가 -->
  <update id="tm_update_view" parameterType="dev.mvc.textmining.Tm_contentsVO">
    UPDATE tm_contents
    SET tcon_views = tcon_views+1
    WHERE tcon_no=#{tcon_no}
  </update>
  
  <!-- 글 수정 -->
  <update id="tm_update_text" parameterType="dev.mvc.textmining.Tm_imageVO">
    UPDATE tm_contents
    SET tcon_name=#{tcon_name}, tcon_contents=#{tcon_contents}
    WHERE tcon_no = #{tcon_no}
  </update>
  
  <!-- 파일 수정 -->
  <update id="tm_update_file" parameterType="dev.mvc.textmining.Tm_imageVO">
    UPDATE tm_image
    SET file_origin_name=#{file_origin_name}, file_upload_name=#{file_upload_name}, file_thumb_name=#{file_thumb_name},file_size=#{file_size}
    WHERE file_no=#{file_no} 
  </update>
  
  <!-- 이미지 수 -->
  <select id="tm_search_count_image" resultType="int" parameterType="int">
    SELECT file_no, tcon_no, file_origin_name, file_upload_name, file_thumb_name, file_size, file_date
    FROM tm_image
    WHERE tcon_no=#{tcon_no}
  </select>
  
  <!-- 파일 삭제 -->
  <delete id="tm_delete_image" parameterType="int">
    DELETE FROM tm_image
    WHERE tcon_no=#{tcon_no}
  </delete>
  
   <!-- 글 삭제 -->
  <delete id="tm_delete" parameterType="int">
    DELETE FROM tm_contents
    WHERE tcon_no=#{tcon_no}
  </delete>
  
  <!-- FK cate_no 컬럼에 대응하는 필수 SQL -->
  <!-- 특정 카테고리에 속한 레코드 갯수를 리턴 -->
  <select id="count_by_cate_no" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt 
    FROM tcon_no 
    WHERE cate_no=#{cate_no}
  </select>
  
  <!-- 특정 카테고리에 속한 모든 레코드 삭제 -->
  <delete id="delete_by_cate_no" parameterType="int">
    DELETE FROM tcon_no
    WHERE cate_no=#{cate_no}
  </delete>

  <!-- FK acc_no 컬럼에 대응하는 필수 SQL -->
  <!-- 특정 회원에 속한 레코드 갯수를 리턴 -->
  <select id="count_by_acc_no" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt 
    FROM tcon_no 
    WHERE acc_no=#{acc_no}
  </select>
  
  <!-- 특정 회원에 속한 모든 레코드 삭제 -->
  <delete id="delete_by_acc_no" parameterType="int">
    DELETE FROM tcon_no
    WHERE acc_no=#{acc_no}
  </delete>
  
   <!-- 댓글 등록 -->
  <insert id="tm_create_comment" parameterType="dev.mvc.textmining.Tm_commentVO">
    INSERT INTO tm_comment(tcmt_no, acc_no, qcon_no, tcmt_contents, tcmt_date)
    VALUES(tna_comment_seq.nextval, #{acc_no}, #{tcon_no}, #{tcmt_contents}, sysdate)
  </insert>
  
  <!-- 특정 글에 따른 댓글 목록 -->
  <select id="list_by_tcmt_no_join" resultType="dev.mvc.textmining.Tm_Acc_commentVO" parameterType="int">
     SELECT a.acc_id, tm.tcmt_no, tm.acc_no, tm.tcon_no, tm.tcmt_contents, tm.tcmt_date 
     FROM account a, tm_comment tm 
     WHERE (a.acc_no = tm.tcmt_no) AND tm.tcon_no=#{tm.tcon_no} 
     ORDER BY tm.tcmt_no DESC
  </select>
  
  <!-- 최신 댓글 500건 -->
  <select id="list_by_tcmt_no_join_500"  resultType="dev.mvc.textmining.Tm_Acc_commentVO" parameterType="int">
    SELECT acc_id, tcmt_no, tcon_no, acc_no, tcmt_contents, tcmt_date, r
    FROM (
          SELECT acc_id, tcmt_no, tcon_no, acc_no, tcmt_contents, tcmt_date, rownum as r
          FROM (
                SELECT  a.acc_id, 
                         t.tcmt_no, t.tcon_no, t.acc_no, t.tcmt_contents, t.tcmt_date
                FROM account a, tm_comment t
                WHERE (a.acc_no = t.acc_no) AND t.tcon_no=#{tcon_no}
                ORDER BY t.tcmt_no DESC
          )
    )
    WHERE r &lt;= 500
  </select>
  
  <!-- 작성 댓글 500건 -->
  <select id="asc_list_by_tcmt_no_join_500"  resultType="dev.mvc.textmining.Tm_Acc_commentVO" parameterType="int">
    SELECT acc_id, tcmt_no, tcon_no, acc_no, tcmt_contents, tcmt_date, r
    FROM (
          SELECT acc_id, tcmt_no, tcon_no, acc_no, tcmt_contents, tcmt_date, rownum as r
          FROM (
                SELECT  a.acc_id, 
                         t.tcmt_no, t.tcon_no, t.acc_no, t.qcmt_contents, t.tcmt_date
                FROM account a, tm_comment t
                WHERE (a.acc_no = t.acc_no) AND t.tcon_no=#{tcon_no}
                ORDER BY t.tcmt_no DESC
          )
    )
    WHERE r &lt;= 500
  </select>
  
  <!-- 특정 글에 따른 댓글 -->
  <select id="tm_read_comment" resultType="dev.mvc.textmining.Tm_commentVO" parameterType="int">
    SELECT tcmt_no, tcon_no, acc_no, tcmt_contents, tcmt_date
    FROM tm_comment
    WHERE tcmt_no=#{tcmt_no}
  </select>
  
  <!-- 댓글 수 -->
  <select id="tm_search_count_comment" resultType="int" parameterType="int">
    SELECT count(*)
    FROM tm_comment
    WHERE tcon_no=#{tcon_no}
  </select>
  
 <!-- 댓글 수 증가 -->
 <update id="increase_reply_cnt" parameterType="int">
   UPDATE tm_contents
   SET tcon_comment = tcon_comment + 1
   WHERE tcon_no = #{tcon_no}
 </update>

 <!-- 댓글 수 감소 -->
 <update id="decrease_reply_cnt" parameterType="int">
   UPDATE tm_contents
   SET tcon_comment = tcon_comment - 1
   WHERE tcon_no = #{tcon_no}
 </update>
   
  <!-- 댓글 수정 -->
  <update id="tm_update_comment" parameterType="dev.mvc.textmining.Tm_commentVO">
    UPDATE tm_comment SET tcmt_contents=#{tcmt_contents}
    WHERE tcmt_no = #{tcmt_no}
  </update>
  
  <!-- 댓글 삭제 -->
  <delete id="tm_delete_comment" parameterType="int">
    DELETE FROM tm_comment 
    WHERE tcmt_no = #{tcmt_no}
  </delete>
  
  <!-- 특정 질문글 댓글 전체 삭제 -->
  <delete id="all_tm_delete_comment" parameterType="int">
    DELETE FROM tm_comment 
    WHERE tcon_no = #{tcon_no}
  </delete>
  
  <!-- 특정 질문글 북마크 갯수 확인 -->
  <select id="bookmark_count" parameterType="int">
    SELECT count(*)
    FROM tm_mark
    WHERE tcon_no=#{tcon_no}
  </select>
  
 
  <!-- 특정 질문글 북마크하였는지 확인 --> <!-- 여기서부터 다시 시작해야 함 -->
  

</mapper>

